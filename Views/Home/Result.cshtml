@using Newtonsoft.Json
@model QuestionGeneratorWithCohere.Models.SaveRequest
@{
    ViewData["Title"] = "Result";
}

<div class="row">
    <div class="col-xl-4">
        <div class="card card-animate">
            <div class="card-body">
                <div class="d-flex align-items-center">
                    <div class="avatar-sm flex-shrink-0">
                        <span class="avatar-title bg-primary-subtle text-primary rounded-2 fs-2">
                            <i class="bx bx-book-content text-primary"></i>
                        </span>
                    </div>
                    <div class="flex-grow-1 overflow-hidden ms-3">
                        <p class="text-uppercase fw-medium text-muted text-truncate mb-1">
                            Syllabus:
                        </p>
                        <div class="d-flex align-items-center mb-3">
                            <h4 class="fs-4 flex-grow-1 mb-0">@Model.Syllabus</h4>
                        </div>
                    </div>
                </div>
            </div><!-- end card body -->
        </div>
    </div><!-- end col -->

    <div class="col-xl-4">
        <div class="card card-animate">
            <div class="card-body">
                <div class="d-flex align-items-center">
                    <div class="avatar-sm flex-shrink-0">
                        <span class="avatar-title bg-primary-subtle text-primary rounded-2 fs-2">
                            <i class=" bx bx-hourglass text-primary"></i>
                        </span>
                    </div>
                    <div class="flex-grow-1 overflow-hidden ms-3">
                        <p class="text-uppercase fw-medium text-muted text-truncate mb-1">
                            Question Type:
                        </p>
                        <div class="d-flex align-items-center mb-3">
                            <h4 class="fs-4 flex-grow-1 mb-0">@Model.QuestionType</h4>
                        </div>
                    </div>
                </div>
            </div><!-- end card body -->
        </div>
    </div><!-- end col -->

    <div class="col-xl-4">
        <div class="card card-animate">
            <div class="card-body">
                <div class="d-flex align-items-center">
                    <div class="avatar-sm flex-shrink-0">
                        <span class="avatar-title bg-primary-subtle text-primary rounded-2 fs-2">
                            <i class="bx bx-collection text-primary"></i>
                        </span>
                    </div>
                    <div class="flex-grow-1 overflow-hidden ms-3">
                        <p class="text-uppercase fw-medium text-muted text-truncate mb-1">
                            Dificulty Level:
                        </p>
                        <div class="d-flex align-items-center mb-3">
                            <h4 class="fs-4 flex-grow-1 mb-0">@Model.DificultyLevel</h4>
                        </div>
                    </div>
                </div>
            </div><!-- end card body -->
        </div>
    </div><!-- end col -->
</div><!-- end row -->


<div class="card">
    <div class="card-body">
        <ul class="list-unstyled">
            @foreach (var question in Model.Questions)
            {
                <li class="qs-choise p-2">
                    <p class="text-danger mb-0"><strong><span class="fs-18">Q.</span> @question.Text</strong></p>
                    <p class=""><span>Ans:</span> @question.Answer</p>
                    <p class=""><span>CO:</span> @question.COText</p>
                    <p class=""><span>BL:</span> @question.BLText</p>
                    @if (Model.QuestionType == "MCQ")
                    {
                        <div class="">
                            <h4>Choices:</h4>
                            <ul>
                                @foreach (var choice in question.Choices)
                                {
                                    <li>@choice</li>
                                }
                            </ul>
                        </div>
                    }

                    @if (Model.QuestionType == "Multi-Part")
                    {
                        <p>Sub-Questions:</p>
                        <ul>
                            @foreach (var subQuestion in question.SubQuestions)
                            {
                                <li>@subQuestion.Text - @subQuestion.Answer</li>
                            }
                        </ul>
                    }
                </li>
            }
        </ul>
    </div>
</div>
<div id="loader" class="d-none position-fixed top-0 start-0 w-100 h-100 bg-light bg-opacity-50 d-flex align-items-center justify-content-center" style="z-index: 1050;">
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
</div>
<div class="text-end mb-3">
    <button id="btnSave" onclick="SaveQuestionData(this);" class="btn btn-primary">Save Data</button>
    <a asp-action="Index"><i data-feather="corner-up-left"></i> <i class=""></i> Back to Generate Questions</a>
</div>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
@* <script>
    function SaveQuestionData(button) {
        debugger
        const saveRequest = {
            syllabus: "@Model.Syllabus",
            questionType: "@Model.QuestionType",
            questions: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Questions))
        };

        $.ajax({
            url: '/Home/SaveQuestions',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(saveRequest),
            success: function (response) {
                alert("Data saved successfully!");
                button.disabled = true;
                // window.location.href = '/Home/Success'; // Redirect to a success page if needed
            },
            error: function (xhr, status, error) {
                alert("An error occurred: " + error);
            }
        });
    }
</script> *@
<script>
    //For Server Use
     function SaveQuestionData(button) {
        
        const saveRequest = {
            syllabus: "@Model.Syllabus",
            questionType: "@Model.QuestionType",
            questions: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Questions))
        };
      
        showLoader();
        // const baseUrl = window.location.origin + '/QuestionGeneratorAI';
        // alert(baseUrl)
        debugger
        $.ajax({
           url: `/Home/SaveQuestions`,
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(saveRequest),
            success: function (response) {
                hideLoader();
                if (response.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Saved!',
                        text: response.message,
                    });
                    button.disabled = true;
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: response.message,
                    });
                }
            },
            error: function () {
                hideLoader();
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An unexpected error occurred.',
                });
            }
        });
    }
    //For local use
    // function SaveQuestionData(button) {
    //     const saveRequest = {
    //         syllabus: "@Model.Syllabus",
    //         questionType: "@Model.QuestionType",
    //         questions: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Questions))
    //     };

    //     showLoader();

    //     $.ajax({
    //         url: '/Home/SaveQuestions',
    //         type: 'POST',
    //         contentType: 'application/json',
    //         data: JSON.stringify(saveRequest),
    //         success: function (response) {
    //             hideLoader();
    //             if (response.success) {
    //                 Swal.fire({
    //                     icon: 'success',
    //                     title: 'Saved!',
    //                     text: response.message,
    //                 });
    //                 button.disabled = true;
    //             } else {
    //                 Swal.fire({
    //                     icon: 'error',
    //                     title: 'Error',
    //                     text: response.message,
    //                 });
    //             }
    //         },
    //         error: function () {
    //             hideLoader();
    //             Swal.fire({
    //                 icon: 'error',
    //                 title: 'Error',
    //                 text: 'An unexpected error occurred.',
    //             });
    //         }
    //     });
    // }

    function showLoader() {
        document.getElementById('loader').classList.remove('d-none');
    }

    function hideLoader() {
        document.getElementById('loader').classList.add('d-none');
    }
</script>
